import stdlib

PREFIX_LENGTH = 2
STOP_WORDS = None
# STOP_WORDS = ["i","me","my","myself","we","our","ours","ourselves","you","your","yours","yourself","yourselves","he","him","his","himself","she","her","hers","herself","it","its","itself","they","them","their","theirs","themselves","what","which","who","whom","this","that","these","those","am","is","are","was","were","be","been","being","have","has","had","having","do","does","did","doing","a","an","the","and","but","if","or","because","as","until","while","of","at","by","for","with","about","against","between","into","through","during","before","after","above","below","to","from","up","down","in","out","on","off","over","under","again","further","then","once","here","there","when","where","why","how","all","any","both","each","few","more","most","other","some","such","no","nor","not","only","own","same","so","than","too","very","s","t","can","will","just","don","should","now"]

# Load stop words
$.get('misc/stop_words.txt', def(data):
    nonlocal STOP_WORDS
    STOP_WORDS = data.trim().split(RegExp('\\s+'))
    # Set them as the title text of the '#stop-words' element
    $('#stop-words').prop('title', STOP_WORDS.join(', '))
)

def normalize(string):
    """
    Replace the punctuation from the given text string with blanks,
    lowercase all words, and return the resulting text string.
    """
    return string.replace(
      RegExp('[\\"\\|\\.,-\\/#!$%\\^&\\*;:{}=\\-_`~()@\\+\\?><\\[\\]\\+]', 'g'), 
      ' ').toLowerCase()

def load_word_lists():
    """
    Return a list of at most three lists of words.
    Each word list is obtained by normalizing and splitting the texts from
    the three source text boxes on the webpage.
    """
    texts = [
      $('#source1').val(), 
      $('#source2').val(), 
      $('#source3').val()]
    word_lists = []
    for text in texts:
        word_list = normalize(text.trim()).split(RegExp('\\s+'))
        # word_list = re.split('\\s+', text) # requires ``import re``
        if len(word_list) > PREFIX_LENGTH:
            word_lists.append(word_list)
    return word_lists

def load_num_words():
    return int($('#num-words').val())

def get_words(word_lists, portions):
    """
    Truncate the given word lists according to the given portions,
    concatenate the truncations into one word list, and return the result.
    """
    # Truncate word_lists to accord with portions
    P = sum(portions)
    m = Math.min(*[len(wl) for wl in word_lists])
    counts = [Math.max(PREFIX_LENGTH, Math.ceil(m*p/P)) for p in portions]
    word_lists = [word_lists[i][:counts[i]] for i in range(len(word_lists))] 
    # Concatenate word lists into one word list
    result = []
    for wl in word_lists:
        result.extend(wl)
    return result

def pack(items):
    """
    Turn the given list of strings into the single string 
    item1##item2##...##itemN to simulate a tuple.
    RapydScript doesn't have tuple objects :-(
    """
    return items.join('##')

def unpack(string):
    """
    The inverse of ``pack()``.
    """
    return string.split('##')

def get_markov_analysis(words, prefix_length=PREFIX_LENGTH):
    """
    Return a Markov analysis of the given list of words.
    The output format is a dictionary with structure: 
    a tuple of contiguous words in ``words`` of length ``prefix_length`` 
    (a prefix) -> a list of all individual words in ``words`` that occur 
    after that prefix (list includes repeats).
    """
    result = {}
    for i in range(len(words) - prefix_length):
        prefix = pack(words[i:i + prefix_length])
        suffix = words[i + prefix_length]
        if prefix in result:
            result[prefix].append(suffix)
        else:
            result[prefix] = [suffix]
    return result

def shuffle(a):
    """
    Randomly shuffle the given list and return the result.
    Use the Fisherâ€“Yates shuffle, which is well explained at 
    http:#bost.ocks.org/mike/shuffle/ .
    """
    m = len(a) - 1
    # While there remain elements to shuffle
    while m: 
        # Pick a remaining element
        i = Math.floor(Math.random()*m)
        # And swap it with the current element
        a[m], a[i] = a[i], a[m]
        m -= 1
    return a

def choose(a):
    """
    Return a random element from the given list.
    """
    i = Math.floor(Math.random()*len(a))
    return a[i]

def get_mix(words, num_words, prefix_length=2):
    """
    Return a list of ``num_words`` random words from 
    the given list of words. 
    Do this by shuffling ``d = get_markov_analysis(words, prefix_length)``,
    and traversing ``d`` until ``num_words`` random words have been 
    generated.
    """
    d = get_markov_analysis(words, prefix_length)
    # Check if d is empty. Unlike Python, you can't do ``if d`` 
    # in RapydScript
    if not len(d):
        return []

    # Shuffle prefixes
    prefixes = shuffle(dict.keys(d))
    result = unpack(prefixes[0])

    # Build num_words of random text or
    # or as many words as possible
    i = 0   
    while i < num_words:
        # Get next prefix
        prefix = pack(result[i:i + prefix_length])
        # Choose a random suffix from d[pack(prefix)]
        while prefix not in d:
            # Unlucky and got the last prefix in the source text
            # which necessarily has no suffix list.
            # So choose another prefix at random.
            prefix = choose(prefixes)
        s = d[prefix]
        suffix = choose(s)
        result.append(suffix)
        i += 1
    return result

def dump_mix(mix):
    $('#mix').val(mix)

def load_mix():
    return $('#mix').val()

def load_poem():
    return $('#poem').val()

def validate():
    mix = normalize(load_mix().trim()).split(RegExp('\\s+'))
    mix_words = [word for word in mix if word not in STOP_WORDS]
    mix_stems = [stemmer(word) for word in mix_words]
    poem_words = normalize(load_poem().trim()).split(RegExp('\\s+'))
    invalid_words = []
    for word in poem_words:
        if word in STOP_WORDS:
            continue
        if stemmer(word) not in mix_stems and word not in invalid_words:
            invalid_words.append(word)
    return invalid_words

def dump_validation(report):
    $('#validation-report').html(report)

$('#make-mix').click(def():
    $("#source1" ).effect("shake", {'times':3}, 800)
    $("#source2" ).effect("shake", {'times':3}, 1000)
    $("#source3" ).effect("shake", {'times':3}, 1200)
    setTimeout(def():
        $("#mix" ).effect("shake", {'times':1}, 800)
        print('Hello!')
        word_lists = load_word_lists()
        portions = [1 for i in len(word_lists)]
        words = get_words(word_lists, portions)
        print('source num words', len(words))
        num_words = load_num_words()
        print('mix num words', num_words)
        mix = get_mix(words, num_words)
        dump_mix(mix.join(' '))
    ,1000)
)        
$('#validate').click(def():
    invalid_words = validate()
    if len(invalid_words) > 0:
        report = 'Uh oh, the following words in your poem ' +\
        'appear to violate Rule M(a):' +\
        '<textarea class="short">' + invalid_words.join(', ') + '</textarea>'
    else:
        report = '<p>Success!</p>'
    dump_validation(report)
    # Scroll to validation report
    $('html, body').animate({
        'scrollTop': $("#validate").offset().top
        }, 500)
)
